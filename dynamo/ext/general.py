import io

import discord
from discord import app_commands
from discord.ext import commands

from dynamo.bot import Dynamo
from dynamo.utils.cache import cache_bytes, get_bytes
from dynamo.utils.converter import MemberConverter
from dynamo.utils.helper import generate_seed
from dynamo.utils.identicon import Identicon, get_colors, make_identicon
from dynamo.utils.time import human_timedelta


def embed_from_user(user: discord.Member | discord.User) -> discord.Embed:
    e = discord.Embed()
    e.set_footer(text=f"Discord ID: {user.id}")
    e.set_author(name=str(user))
    avatar = user.display_avatar.with_static_format("png")
    e.set_image(url=avatar.url)
    return e


class General(commands.GroupCog, group_name="general"):
    """General commands"""

    def __init__(self, bot: Dynamo) -> None:
        self.bot: Dynamo = bot

    @commands.hybrid_command(name="ping")
    async def ping(self, ctx: commands.Context) -> None:
        """Get the bot's latency"""
        await ctx.send(f"\N{TABLE TENNIS PADDLE AND BALL} {round(self.bot.latency * 1000)}ms")

    @commands.hybrid_command(name="invite")
    async def invite(self, ctx: commands.Context) -> None:
        """Get the invite link for the bot"""
        if (user := self.bot.user) is None:
            return

        await ctx.send(f"[Invite me here!]({discord.utils.oauth_url(user.id)})", ephemeral=True)

    @commands.hybrid_command(name="about")
    async def about(self, ctx: commands.Context) -> None:
        """Get information about the bot"""
        e = embed_from_user(self.bot.user)
        bot_name = self.bot.user.display_name
        e.title = f"About {bot_name}"
        e.description = f"{bot_name} is a bot that does stuff."
        e.add_field(name="Uptime", value=f"`{human_timedelta(dt=self.bot.uptime, suffix=False)}`")
        await ctx.send(embed=e)

    @commands.hybrid_command(name="user")
    @app_commands.describe(user="The user to get information about")
    async def user(self, ctx: commands.Context, user: discord.Member | discord.User | None = None) -> None:
        """Get information about a user"""
        await ctx.send(embed=embed_from_user(user or ctx.author), ephemeral=True)

    @commands.hybrid_command(name="identicon")
    @app_commands.describe(seed="The seed to use for the identicon.")
    async def identicon(self, ctx: commands.Context, seed: MemberConverter = None) -> None:
        if isinstance(seed, discord.Member):
            seed = seed.id
        seed, fname = generate_seed(seed)

        fg, bg = get_colors(seed=seed)

        if (cached := get_bytes(fname)) is None:
            idt = Identicon(5, fg, bg, 0.4, seed)
            data = make_identicon(idt)
            cache_bytes(fname, data)
        else:
            data = cached

        e = discord.Embed()
        e.set_author(name=fname)
        e.set_footer(text=f"d!identicon {fname}")   
        file = discord.File(
            io.BytesIO(data),
            filename=f"{fname}.png",
            description=f"An identicon generated by {ctx.author.display_name}",
        )
        e.set_image(url=f"attachment://{fname}.png")
        await ctx.send(embed=e, file=file)


async def setup(bot: Dynamo) -> None:
    await bot.add_cog(General(bot))
