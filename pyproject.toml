[project]
name = "dynamo"
version = "0.2.0"
description = "Bot for personal use"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.13"
dependencies = [
    "apsw>=3.47.0.0",
    "base2048>=0.1.3",
    "discord-py[speed]",
    "dynaconf>=3.2.6",
    "dynamo-utils",
    "msgspec",
    "numpy>=2.1.3",
    "pillow>=11.0.0",
    "platformdirs>=4.3.6",
    "toml>=0.10.2",
    "truststore>=0.10.0",
    "xxhash>=3.5.0",
]

[tool.uv.sources]
discord-py = { git = "https://github.com/mikeshardmind/discord.py.git", rev = "89ac64f" }
msgspec = { git = "https://github.com/jcrist/msgspec", rev = "main" }
dynamo-utils = { git = "https://github.com/trumully/dynamo-utils" }

[dependency-groups]
dev = [
    "hypothesis>=6.119.3",
    "mypy>=1.13.0",
    "ruff>=0.7.4",
]

[project.scripts]
dynamo = "dynamo.cli:main"


[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[tool.ruff]
src = [
    "dynamo",
]
target-version = "py313"
line-length = 120
preview = true


[tool.ruff.lint]
select = [
    "A", "ANN", "ASYNC", "B", "BLE", "C4", "COM", "DTZ", "E",
    "EM", "ERA", "F", "FA", "FURB", "G", "I", "INP", "ISC", "NPY",
    "PD", "PERF", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PTH", "PYI",
    "Q", "Q003", "RET", "RSE", "RUF", "S", "SIM", "SLOT", "T20", "TC", "TID",
    "TRY", "UP", "YTT"
]

ignore = [
    "ANN401",  # Any is correct in some cases
    "D1",  # Well named items don't need docstrings
    "E501",  # Ruff handles this 
    "RET504",  # A bit too opinionated 
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "RUF029",  # Some interfaces need an async method
    "S101",  # Allow assert
    "ERA001",  # Allow commented out code
    "PLC0415",  # Top-of-file imports are not always best
]

unfixable = [
    "F841", # I'm planning to use it
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "PLR2004",
]

[tool.ruff.lint.pydocstyle]
convention = "google"
"ignore-decorators" = [
    "typing.overload",
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.

"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"


[tool.mypy]
plugins = [
    "numpy.typing.mypy_plugin",
]
python_version = "3.13"
strict = true

# Disallow dynamic typing
disallow_untyped_defs = true
disallow_any_unimported = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true

# Enable all strict checking flags
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unreachable = true

# Import handling
ignore_missing_imports = true

# Additional recommended settings
allow_redefinition = false
implicit_reexport = false
strict_equality = true
