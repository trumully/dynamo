[project]
name = "dynamo"
version = "0.1.0"
description = "\"Bot for personal use\""
readme = "README.md"
license = { file = "LICENSE" }
requires-python = "<3.14,>=3.13.0"
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: The Unlicense (Unlicense)",
    "Operating System :: OS Independent",
    "Typing :: Typed",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13"
]
dependencies = [
    "apsw>=3.47.0.0",
    "base2048>=0.1.3",
    "discord-py[speed]",
    "dynaconf>=3.2.6",
    "dynamo-utils",
    "msgspec",
    "numpy>=2.1.3",
    "pillow>=11.0.0",
    "platformdirs>=4.3.6",
    "toml>=0.10.2",
    "truststore>=0.10.0",
    "xxhash>=3.5.0",
]

[tool.uv.sources]
discord-py = { git = "https://github.com/mikeshardmind/discord.py.git", rev = "89ac64f" }
msgspec = { git = "https://github.com/jcrist/msgspec", rev = "main" }
dynamo-utils = { git = "https://github.com/trumully/dynamo-utils", rev = "c3db2f8a9f07dfa91e44e2837737456209bc310c" }

[project.scripts]
dynamo = "dynamo.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
src = ["dynamo"]
target-version = "py313"
line-length = 90
preview = true


[tool.ruff.lint]
select = [
    "A", "ANN", "ASYNC", "B", "BLE", "C4", "COM", "DTZ", "E",
    "EM", "ERA", "F", "FA", "FURB", "G", "I", "INP", "ISC", "NPY",
    "PD", "PERF", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PTH", "PYI",
    "Q", "Q003", "RET", "RSE", "RUF", "S", "SIM", "SLOT", "T20", "TC", "TID",
    "TRY", "UP", "YTT"
]

ignore = [
    "ANN401",  # Any is correct in some cases
    "D1",  # Well named items don't need docstrings
    "E501",  # Ruff handles this 
    "RET504",  # A bit too opinionated 
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "RUF029",  # Some interfaces need an async method
    "S101",  # Allow assert
    "PLC0415",  # Top-of-file imports are not always best

    # These screw with formatting
    "COM812",
    "ISC001",

    "PLR6301",
]

unfixable = [
    "E501",  # Handled by ruff format
    "F841", # I'm planning to use it
    "ERA",  # Allow commented code
]

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLC1901", "PLR2004", "PLR6301", "S", "TID252"]


[tool.ruff.lint.pydocstyle]
convention = "google"
"ignore-decorators" = [
    "typing.overload",
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# https://discuss.python.org/t/problems-with-typeis/55410/6
# https://discuss.python.org/t/problems-with-typeis/55410/46
# Until what can go into a TypeIs/TypeGuard changes, these are just dangerous.

"typing.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing.TypeGuard".msg = "TypeGuard is fundamentally unsafe"
"typing_extensions.TypeIs".msg = "TypeIs is fundamentally unsafe, even when using it as described to be safe"
"typing_extensions.TypeGuard".msg = "TypeGuard is fundamentally unsafe"


[tool.pyright]
include = ["dynamo"]
exclude = [
    "**/__pycache__",
    "build",
    "dist",
]
pythonVersion = "3.13"
typeCheckingMode = "strict"
pythonPlatform = "All"
reportImportCycles = "error"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
